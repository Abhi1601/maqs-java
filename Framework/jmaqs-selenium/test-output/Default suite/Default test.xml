<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="RobertW-PC1" ignored="0" name="Default test" tests="6" failures="0" timestamp="09 Sep 2019 02:08:25 GMT" time="0.053" errors="0">
  <testcase name="@BeforeClass setup" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest&amp;gt; into a @BeforeClass annotated setup.
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated setup.
For more information on native dependency injection please refer to http://testng.org/doc/documentation-main.html#native-dependency-injection
at org.testng.internal.Parameters.checkParameterTypes(Parameters.java:407)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:356)
at org.testng.internal.Parameters.createParameters(Parameters.java:635)
at org.testng.internal.Parameters.createConfigurationParameters(Parameters.java:190)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:209)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:142)
at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:168)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:105)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeClass setup -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="@AfterMethod setTestResult" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod setTestResult -->
  <testcase name="@AfterMethod teardown" time="0.0" classname="com.magenic.jmaqs.base.BaseTest">
    <skipped/>
  </testcase> <!-- @AfterMethod teardown -->
  <testcase name="getWaitDriverTest" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- getWaitDriverTest -->
  <testcase name="getWaitDriverWhenOneExists" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- getWaitDriverWhenOneExists -->
  <testcase name="getWaitDriverWithWebElement" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- getWaitDriverWithWebElement -->
  <testcase name="removeWaitDriver" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- removeWaitDriver -->
  <testcase name="setWaitDriverWhenDriverKeyDoesExist" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- setWaitDriverWhenDriverKeyDoesExist -->
  <testcase name="setWaitDriverWhenDriverKeyDoesNotExist" time="0.0" classname="com.magenic.jmaqs.selenium.UIWaitFactoryUnitTest">
    <skipped/>
  </testcase> <!-- setWaitDriverWhenDriverKeyDoesNotExist -->
</testsuite> <!-- Default test -->
